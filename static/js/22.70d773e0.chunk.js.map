{"version":3,"file":"static/js/22.70d773e0.chunk.js","mappings":"uKAiHA,QA7GA,WACE,MAAMA,GAAYC,EAAAA,EAAAA,QAAO,MAwGzB,OAtGAC,EAAAA,EAAAA,YAAU,KAER,MAAMC,EAAQ,IAAIC,EAAAA,IAGZC,EAAe,IAAID,EAAAA,IAAmB,SAAU,IACtDD,EAAMG,IAAID,GACV,MAAME,EAAmB,IAAIH,EAAAA,IAAuB,SAAU,IAC9DD,EAAMG,IAAIC,GAGV,MAAMC,EAAS,IAAIJ,EAAAA,IAAwB,GAAIK,OAAOC,WAAaD,OAAOE,YAAa,GAAK,KAC5FH,EAAOI,SAASC,IAAI,IAAK,GAAI,KAE7B,MAAMC,EAAW,IAAIV,EAAAA,IAAoB,CAAEW,OAAQf,EAAUgB,UAC7DF,EAASG,QAAQR,OAAOC,WAAYD,OAAOE,cAG5B,IAAIO,EAAAA,GACZC,KAAKC,EAAQ,OAA6B,SAAUC,GACzDP,EAASQ,cAAc,EAAU,GACjC,MAAMC,EAAW,IAAInB,EAAAA,IAAwB,CAAEoB,MAAO,SAAUC,SAAU,QAAUC,UAAW,MACzFC,EAAO,IAAIvB,EAAAA,IAAWiB,EAAUE,GACtCI,EAAKC,SAASC,GAAKC,KAAKC,GAAK,EAC7B5B,EAAMG,IAAIqB,GAGV,MAAMK,GAAc,IAAI5B,EAAAA,KAAa6B,cAAcN,GAC7CO,EAASF,EAAYG,UAAU,IAAI/B,EAAAA,KACnCgC,EAAOJ,EAAYK,QAAQ,IAAIjC,EAAAA,KAC/BkC,EAASR,KAAKS,IAAIH,EAAKP,EAAGO,EAAKI,EAAGJ,EAAKK,GACvCC,EAAMlC,EAAOkC,KAAOZ,KAAKC,GAAK,KACpC,IAAIY,EAAUb,KAAKc,IAAIN,EAAS,EAAIR,KAAKe,IAAIH,EAAM,IACnDC,GAAW,EAGX,MACMG,EAAUZ,EAAOL,EAAa,EAATS,EACrBS,EAAUb,EAAOM,EAAa,EAATF,EACrBU,EAAkBd,EAAOO,EAAI,EACnCjC,EAAOI,SAASC,IAAIiC,EAASC,EAASC,GACtCxC,EAAOyC,OAAOf,EAChB,IAGA,SAASgB,IACPC,sBAAsBD,GACtBpC,EAASsC,OAAOjD,EAAOK,GAEvBL,EAAMyB,SAASY,GAAK,IACtB,CACAU,GAEA,IAAIG,GAAa,EACbC,EAAwB,CAC1BzB,EAAG,EACHW,EAAG,GAGL,SAASe,EAAoBC,GAC3BA,EAAMC,iBACNJ,GAAa,EACb,MAAM,QAAEK,EAAO,QAAEC,GAAYH,EAC7BF,EAAwB,CACtBzB,EAAG6B,EACHlB,EAAGmB,EAEP,CAEA,SAASC,IACPP,GAAa,CACf,CAEA,SAASQ,EAAoBL,GAC3B,IAAKH,EAAY,OACjB,MAAM,QAAEK,EAAO,QAAEC,GAAYH,EACvBM,EAASJ,EAAUJ,EAAsBzB,EACzCkC,EAASJ,EAAUL,EAAsBd,EAG/CrC,EAAMyB,SAASY,GADO,IACFsB,EACpB3D,EAAMyB,SAASC,GAFO,IAEFkC,EAEpBT,EAAwB,CACtBzB,EAAG6B,EACHlB,EAAGmB,EAEP,CAOA,OALAK,SAASC,iBAAiB,YAAaV,GAAqB,GAC5DS,SAASC,iBAAiB,UAAWL,GAAmB,GACxDI,SAASC,iBAAiB,YAAaJ,GAAqB,GAGrD,KACL/C,EAASoD,UACTF,SAASG,oBAAoB,YAAaZ,GAC1CS,SAASG,oBAAoB,UAAWP,GACxCI,SAASG,oBAAoB,YAAaN,EAAoB,CAC/D,GACA,KAEIO,EAAAA,EAAAA,KAAA,UAAQC,IAAKrE,EAAWsE,MAAO,CAAEC,gBAAiB,cAAeC,MAAO,SAEjF,C","sources":["components/ARTEx 3D.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { STLLoader } from \"three/examples/jsm/loaders/STLLoader\";\n\nfunction App() {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    // Create Three.js scene\n    const scene = new THREE.Scene();\n\n    // Add lights\n    const ambientLight = new THREE.AmbientLight(0xb8c2ce, 0.5);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n    scene.add(directionalLight);\n\n    // Add camera\n    const camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(70, -50, 120);\n    // Create renderer\n    const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n    // Load 3D model\n    const loader = new STLLoader();\n    loader.load(require(\"../images/Full Build.stl\"), function (geometry) {\n      renderer.setClearColor(0x000000, 0);\n      const material = new THREE.MeshPhongMaterial({ color: 0xede8e8, specular: 0x111111, shininess: 200 });\n      const mesh = new THREE.Mesh(geometry, material);\n      mesh.rotation.x = -Math.PI / 3;\n      scene.add(mesh);\n\n      // Adjust camera position to center the model\n      const boundingBox = new THREE.Box3().setFromObject(mesh);\n      const center = boundingBox.getCenter(new THREE.Vector3());\n      const size = boundingBox.getSize(new THREE.Vector3());\n      const maxDim = Math.max(size.x, size.y, size.z);\n      const fov = camera.fov * (Math.PI / 180);\n      let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2));\n      cameraZ *= 0; // Adjust multiplier as needed\n\n      // Calculate camera position\n      const cameraOffset = 0; // Adjust offset as needed\n      const cameraX = center.x + maxDim * 1;\n      const cameraY = center.y + maxDim * 0;\n      const cameraZPosition = center.z + 1; // Renamed to avoid redeclaration\n      camera.position.set(cameraX, cameraY, cameraZPosition);\n      camera.lookAt(center);\n    });\n\n    // Rotate the model\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n      // Rotate the model\n      scene.rotation.y += 0.001; // Adjust the rotation speed as needed\n    }\n    animate();\n\n    let isDragging = false;\n    let previousMousePosition = {\n      x: 0,\n      y: 0,\n    };\n    \n    function onDocumentMouseDown(event) {\n      event.preventDefault();\n      isDragging = true;\n      const { clientX, clientY } = event;\n      previousMousePosition = {\n        x: clientX,\n        y: clientY,\n      };\n    }\n\n    function onDocumentMouseUp() {\n      isDragging = false;\n    }\n\n    function onDocumentMouseMove(event) {\n      if (!isDragging) return;\n      const { clientX, clientY } = event;\n      const deltaX = clientX - previousMousePosition.x;\n      const deltaY = clientY - previousMousePosition.y;\n\n      const rotationSpeed = 0.01; // Adjust the rotation speed as needed\n      scene.rotation.y += deltaX * rotationSpeed;\n      scene.rotation.x += deltaY * rotationSpeed;\n\n      previousMousePosition = {\n        x: clientX,\n        y: clientY,\n      };\n    }\n\n    document.addEventListener(\"mousedown\", onDocumentMouseDown, false);\n    document.addEventListener(\"mouseup\", onDocumentMouseUp, false);\n    document.addEventListener(\"mousemove\", onDocumentMouseMove, false);\n\n    // Cleanup\n    return () => {\n      renderer.dispose();\n      document.removeEventListener(\"mousedown\", onDocumentMouseDown);\n      document.removeEventListener(\"mouseup\", onDocumentMouseUp);\n      document.removeEventListener(\"mousemove\", onDocumentMouseMove);\n    };\n  }, []);\n\n  return <canvas ref={canvasRef} style={{ backgroundColor: \"transparent\", width: \"auto\" }} />;\n\n}\n\nexport default App;\n"],"names":["canvasRef","useRef","useEffect","scene","THREE","ambientLight","add","directionalLight","camera","window","innerWidth","innerHeight","position","set","renderer","canvas","current","setSize","STLLoader","load","require","geometry","setClearColor","material","color","specular","shininess","mesh","rotation","x","Math","PI","boundingBox","setFromObject","center","getCenter","size","getSize","maxDim","max","y","z","fov","cameraZ","abs","tan","cameraX","cameraY","cameraZPosition","lookAt","animate","requestAnimationFrame","render","isDragging","previousMousePosition","onDocumentMouseDown","event","preventDefault","clientX","clientY","onDocumentMouseUp","onDocumentMouseMove","deltaX","deltaY","document","addEventListener","dispose","removeEventListener","_jsx","ref","style","backgroundColor","width"],"sourceRoot":""}